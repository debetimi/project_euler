(ns project-euler.p044
  (:require [clojure.math.numeric-tower :refer [sqrt]]
            [project-euler.utils :refer [enumerate]]))

;;; Pentagonal numbers are generated by the formula, Pn=n (3n−1)/2. The first ten pentagonal numbers are:
;;; 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
;;; It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
;;; Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

(defn pentagon [n]
  (/ (* n (dec (* 3 n))) 2))

(def pentagonal-numbers
  "Lazy sequence of pentagon "
  (letfn [(build [n]
            (cons (pentagon n) (lazy-seq (build (inc n)))))]
    (build 1)))

(defn pentagonal? [n]
  (integer? (/ (inc (sqrt (inc (* 24 n)))) 6))) 

(defn paired? [n m]
  (when (and (pentagonal? (- n m)) (pentagonal? (+ n m)))
    [n m]))

(defn has-pair? [[idx n]]
  (some (partial paired? n) (map pentagon (reverse (range 1 (inc idx))))))

(defn solve []
  (apply - (some has-pair? (enumerate pentagonal-numbers))))
