(ns project-euler.p012
  (:require [clojure.math.numeric-tower :as math]))

;;; The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
;;; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
;;; Let us list the factors of the first seven triangle numbers:
;;; 1: 1
;;; 3: 1,3
;;; 6: 1,2,3,6
;;; 10: 1,2,5,10
;;; 15: 1,3,5,15
;;; 21: 1,3,7,21
;;; 28: 1,2,4,7,14,28
;;; We can see that 28 is the first triangle number to have over five divisors.
;;; What is the value of the first triangle number to have over five hundred divisors?



;; Needed a quick way to get N primes
;; http://stackoverflow.com/questions/960980/fast-prime-number-generation-in-clojure
(def certainty 5)

(defn prime?  [n]
  (.isProbablePrime  (BigInteger/valueOf n) certainty))

(defn log2 [n]
  (/ (Math/log n) (Math/log 2)))

(defn roots 
  "Returns the roots of a quadratic function"
  [a b c]
  (let [discriminant (math/sqrt (- (math/expt b 2) (* 4 a c)))]
    [(/ (- (- b) discriminant) (* 2 a ))
     (/ (+ (- b) discriminant) (* 2 a ))]))

(defn min-triangular-number-with-n-divisors
  [n]
  (let [min-primes-needed (math/ceil (log2 n))
        primes (vec (take min-primes-needed (filter prime? (range 1 Integer/MAX_VALUE))))
        base (reduce * primes)
        roots (roots 1 1 (- (* 2 base)))
        last-num-in-series (math/ceil (apply max roots))]
    (println min-primes-needed primes base roots last-num-in-series)
    (/ (* last-num-in-series (inc last-num-in-series)) 2)))
